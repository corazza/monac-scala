module Essential (
    Eq(..)
)


class Eq a {
    (==) : ref a -> ref a -> Bool
    (/=) : ref a -> ref a -> Bool
    
    // TODO fixity declarations
    
    a == b = !(a /= b)
    a /= b = !(a == b)
}

// Int, UInt, Float (U/Int defaults to 32 bits, Float to 64)
// Int32, Int64, UInt32, UInt64, Float32, Float64
class Num a {
    (+) : (Copy a) => a -> a -> a
    (-) : (Copy a) => a -> a -> a
    (*) : (Copy a) => a -> a -> a
    (/) : (Copy a) => a -> a -> a
}


data Bool = False | True
    deriving (Eq, Show, Copy)

data [] a = [] | List a (List a)

type Int = Int32
type Float = Float64

type String = [Char]

