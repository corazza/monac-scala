module Runtime.Memory (
    Deref(..), DerefMut(..),
    Destructible(..),

    Unique(..),
    HeapAllocated(),
  
    heapAllocate
)


class Deref a {
    deref : ref a b -> ref b
}

class DerefMut a {
    derefMut : ref mut a b -> ref mut b
}

class Destructible a {
    destruct : ref mut a -> ()
}


// Raw a declared in runtime/abstract.mona

instance Deref Raw {
    deref (ref raw) = ???
}

instance DerefMut Raw {
    derefMut (ref mut raw) = ???
}

data Unique a = Unique (Raw a)

instance Deref Unique {
    deref (ref Unique raw) = ref *raw
}

instance DerefMut Unique {
    derefMut (ref mut Unique raw) = ref mut *raw
}

data HeapAllocated a = HeapAllocated (Unique a)

instance Deref HeapAllocated {
    deref (ref HeapAllocated unique) = ref *unique
}

instance DerefMut HeapAllocated {
    derefMut (ref mut HeapAllocated unique) = ref mut *unique
}

instance Destructible HeapAllocated {
    destruct (ref mut HeapAllocated unique) = {
        destruct *unique
        free *unique
    }
}


offset : Raw

free : Raw -> ()

malloc : Int -> RawMut
malloc = ???

memcpy : Raw a -> &x -> Int -> ()
memcpy (RawMut dest) (&source) size = {
    dest = source
}

heapAllocate : a -> HeapAllocated (Unique a)
heapAllocate x = {
    let raw = malloc $ sizeOf x
    memcpy r &x (sizeOf x)
    HeapAllocated r
}

