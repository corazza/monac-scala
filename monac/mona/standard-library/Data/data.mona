module Data (
    Seq(..)
)


class Collection col {
    size    : ref col a -> Int
    elem    : (Eq a) => ref col a -> ref a -> Bool
    (++)    : ref col a -> ref col a -> col a
}


class Iterable col itt {
    iterator    : col a -> itt a

    next        : itt a -> itt a
    hasNext     : itt a -> Bool
    get         : itt a -> a
}

class Seq col itt {
    first   : col a -> itt a
    hasPrev : itt a -> Bool
    prev    : itt a -> itt a
    
    first = iterator
}

instance Iterable Vector VectorIterator {

}

/**
* A sequence is a relationship between a collection and means of iteration over it.
*/
class (Collection col, Copy itt) => Seq col itt {
    ([])    : ref col a -> Int -> ref a

    first   : ref col a -> itt a
    length  : ref col a -> Int
    (::)    : a -> ref col a -> col a

    next    : itt a -> itt a
    prev    : itt a -> itt a
    get     : itt a -> a

    // default implementations  
    ([]) (ref col) i = {
        
    }

    length = size
}


data ListIterator 
instance Seq []

